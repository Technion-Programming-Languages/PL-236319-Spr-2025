print "===TEST START===\n";

local
    val tree1 = END;
    val tree2 = PART(1, END, END);
    val tree3 = PART(2, PART(3, END, END), PART(4, END, END));
    val tree4 = PART(2, PART(3, END, END), PART(4, END, END));
    val tree5 = PART(2, PART(3, END, END), PART(5, END, END));
    val tree6 = PART(10, END, PART(20, END, END));
    val tree7 = PART("100", END, PART(200, PART("300", END, END), END));
in
    (* count tests *)
    val test1 = if count tree1 = 0 then "passed" else "failed"
    val test2 = if count tree2 = 1 then "passed" else "failed"
    val test3 = if count tree3 = 3 then "passed" else "failed"

    (* is_identical tests *)
    val test4 = if is_identical tree3 tree4 then "passed" else "failed"
    val test5 = if not (is_identical tree3 tree5) then "passed" else "failed"
    val test6 = if not (is_identical tree1 tree2) then "passed" else "failed"
    val test7 = if is_identical tree1 tree1 then "passed" else "failed"

    (* fold_uneven tests *)
    val test8 = if fold_uneven tree6 0 (fn x => fn acc => x + acc) = 10 then "passed" else "failed";
    val test9 = if fold_uneven (tree7) "" (fn x => fn acc => x ^ acc) = "100300" then "passed" else "failed";
    val test10 = (let val t = fold_uneven (tree6) 0 (fn x => fn acc => x div acc) in "failed" end) handle GeneralError => "passed";
end;
